// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@shamba/contracts/utils/ShambaDataStream.sol";


contract PolyAirQuality is ERC721URIStorage, ShambaDataStream {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    int256 currentGeostats;

    string[] IpfsUri = [
        "https://bafybeigf6dd7f3vnw5q7vvl2n5blk3ex4g55r2b7vshjs6cu2gbghnp7be.ipfs.dweb.link/no-data-emoji.json",
        "https://bafybeifgoedfpeuhiyhe4mw24bzcizzcjryvceubujosi2n4xe37o7brgi.ipfs.dweb.link/good-air-quality-emoji.json",
        "https://bafybeifgoedfpeuhiyhe4mw24bzcizzcjryvceubujosi2n4xe37o7brgi.ipfs.dweb.link/intermediate-air-quality-emoji.json",
        "https://bafybeifgoedfpeuhiyhe4mw24bzcizzcjryvceubujosi2n4xe37o7brgi.ipfs.dweb.link/bad-air-quality-emoji.json"
    ];

    uint interval;
    uint lastTimeStamp;

    constructor(uint256 _interval, string memory dNFT_name, string memory dNFT_symbol, uint shamba_DON_number, string memory shamba_Data_Stream_Code) ERC721(dNFT_name, dNFT_symbol) ShambaDataStream(shamba_DON_number, shamba_Data_Stream_Code) {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            update_dNFT();
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

        /**
     * This function will return the latest geostats data returned by the getLatestData function of the imported ShambaDataStream contract
     */

    function getShambaGeostatsData() public view returns (int256) {
        return ShambaDataStream.getLatestData();
    }

    function safeMint(address to) public {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

     /**
     * This function will update the state of the dNFT according to the value of the data returned by the getLatestData function of the imported ShambaDataStream contract
     */

    function update_dNFT() public {
        string memory newUri;
        uint256 _tokenId = 0;

        currentGeostats = ShambaDataStream.getLatestData();
        if (currentGeostats != 0) {
            if (currentGeostats <= 0.3 * 10**17) {
                // Good Air Quality
                newUri = IpfsUri[1];
            } else if (
                currentGeostats > 0.3 * 10**17 && currentGeostats < 0.4 * 10**17
            ) {
                // Intermediate Air Quality
                newUri = IpfsUri[2];
            } else {
                // Bad Air Quality
                newUri = IpfsUri[3];
            }

            _setTokenURI(_tokenId, newUri);
        }
    }
}
